// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  product        Product[]
  accounts       Account[]
  orders         Order?
  payment        User_payment?
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User_payment {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.ObjectId @unique

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  price       Int
  image       String[]
  inventory   Int
  description String
  category    Category @default(CLOTHING)
  subCategory String
  tags        String[]

  seller   User   @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  sellerId String @db.ObjectId

  order Order_Items?
}

model Carts {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  clientstripesecret String?
  checkoutsessionId  String?
  paymentIntentId    String?
  items              Json
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
}

model Order {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  user       User          @relation(fields: [userId], references: [id])
  userId     String        @unique @db.ObjectId
  total      Float
  orderItems Order_Items[]
  
  created_at DateTime      @default(now())
  updated_at DateTime      @updatedAt
}

model Order_Items {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @unique @db.ObjectId
  quantity  Int

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String @db.ObjectId
}

enum Category {
  CLOTHING
  SHOES
  ACCESSORIES
}

enum Size {
  XXS
  XS
  S
  M
  L
  XL
  XXL
  XXX
}
